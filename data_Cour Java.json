{
    "Titre": "Cour Java",
    "Contenu": [
        "Cours JA V A :\nIntro duction à Java.\nEmmanuel Hy on1\n1Université P a ris Nanterre.\nEmmanuel.Hy on@pa risnanterre.fr\nLicence MIASHS Miage - 2020/2021\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 1 / 90",
        "Grandes lignes du cours\nJava c'est quoi ?\nCompa ratif : Java, C++\nCompa ratif Concepts\nPro duction du binaire\nCompa ratif Java C Sha rp (C#)\nLe langage Java.\nLes classes Java.\nLes attributs Java\nLes constructeurs\nLes métho des en Java\nClasses utiles : String, tableau et classes envelopp es\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 2 / 90",
        "Java c'est quoi ?\nJava c'est quoi ?\nCompa ratif : Java, C++\nCompa ratif Concepts\nPro duction du binaire\nCompa ratif Java C Sha rp (C#)\nLe langage Java.\nLes classes Java.\nLes attributs Java\nLes constructeurs\nLes métho des en Java\nClasses utiles : String, tableau et classes envelopp es\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 3 / 90",
        "Java c'est quoi ?\nI Deux déclinaisons Java SE ( Standard Edition) et Java\nEE(Enterprise Edition)\nIUn langage : Orienté objet fortement typé avec classes.\nIUn environnement d’exécution (JRE) : Une machine virtuelle et un\nensemble de bibliothèques.\nIUn environnement de développement (JDK) : Une machine virtuelle\net un ensemble d’outils.\nIUne mascotte : Duke\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 4 / 90",
        "Java c'est qui ?\nLa plate-fo rme et le langage Java sont issus d'un p rojet de\nSUN Microsystems datant de 1990 (p résentation o\u001ecielle en 1995).\nGénéralement, on attribue sa paternité a trois de ses ingénieurs :\nI James Gosling\nI P atrick Naughton\nI Mik e Sheridan\nFigure – 1990 Barbecue chez James Gosling\nEn 2010 SUN est racheté pa r Oracle .\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 5 / 90",
        "Java c'est p ourquoi ?\nJava est devenu aujourd'hui l'un des langages de p rogrammation les\nplus utilisés. Il est incontournable dans plusieurs domaines :\nI Systèmes dynamiques : Cha rgement dynamique de classes.\nI Internet : Les Applets java (dép réciés), servlets\nI Systèmes communicants : RMI , Co rba , EJB ...\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 6 / 90",
        "Java c'est p our qui ?\nP our tous : Le 13 novemb re 2006, SUN annonce le passage de\nJava, c'est-à-dire le JDK (JRE et outils de\ndévelopp ement) sous licence GPL.\nP our vous : Cette UE sur Java servira de base à l'ensemble des\nUE techniques du Master.\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 7 / 90",
        "Compa ratif : Java, C++\nJava c'est quoi ?\nCompa ratif : Java, C++\nCompa ratif Concepts\nPro duction du binaire\nCompa ratif Java C Sha rp (C#)\nLe langage Java.\nLes classes Java.\nLes attributs Java\nLes constructeurs\nLes métho des en Java\nClasses utiles : String, tableau et classes envelopp es\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 8 / 90",
        "Java versus C++ : Histo rique\nDeux langages o rientés objets dominent : C++ et Java .\nI Le langage C++ :\nIextension du langage C, intégrant les concepts de la\nprogrammation orientée objet,\nIné dans les laboratoires AT&T Bell,\nIpremière version opérationnelle date de 1983.\nI Le langage Java :\nImis au point en 1991 par la ﬁrme SUN Microsystems,\nIle but de Java était de constituer un langage de\nprogrammation pouvant être intégré dans des décodeurs de\ntélévision par cable, aﬁn de pouvoir les contrôler, de les rendre\ninteractifs, et surtout de permettre une communication entre\nles appareils write once, run everywhere\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 9 / 90",
        "Outline\nJava c'est quoi ?\nCompa ratif : Java, C++\nCompa ratif Concepts\nPro duction du binaire\nCompa ratif Java C Sha rp (C#)\nLe langage Java.\nLes classes Java.\nLes attributs Java\nLes constructeurs\nLes métho des en Java\nClasses utiles : String, tableau et classes envelopp es\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 10 / 90",
        "Compa ratif Concepts\nJava c'est quoi ?\nCompa ratif : Java, C++\nCompa ratif Concepts\nPro duction du binaire\nCompa ratif Java C Sha rp (C#)\nLe langage Java.\nLes classes Java.\nLes attributs Java\nLes constructeurs\nLes métho des en Java\nClasses utiles : String, tableau et classes envelopp es\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 11 / 90",
        "Java versus C++ : concepts (1)\nI Java est très p ro che du langage C++ (et donc du langage C )\nétant donné qu'il a quasiment la même syntaxe.\nI T outefois Java est plus simple que le langage C++ , ca r les\nca ractéristiques critiques du langage C++ (celles qui sont à\nl'o rigine des p rincipales erreurs) ont été supp rimées. Cela\ncomp rend :\nILes pointeurs.\nILa surcharge d’opérateurs.\nIL’héritage multiple.\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 12 / 90",
        "Java versus C++ : concepts (2)\nDe plus,\n- T out est dynamique : les instances d'une classe sont\ninstanciées dynamiquement.\n- La lib ération de mémoire est transpa rente p our l'utilisateur. Il\nn'est pas nécessaire de sp éci\u001cer de mécanisme de destruction.\nLa lib ération de l'espace mémoire est p rise en cha rge un\ngestionnaire app elé ga rbage collecto r ) cha rgé de détecter les\nobjets à détruire.\nNotes\nI gain de \u001cabilité (pas de désallo cation erronée).\nI a un coût (p erte en rapidité pa r rapp o rt au C++ ).\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 13 / 90",
        "Outline\nJava c'est quoi ?\nCompa ratif : Java, C++\nCompa ratif Concepts\nPro duction du binaire\nCompa ratif Java C Sha rp (C#)\nLe langage Java.\nLes classes Java.\nLes attributs Java\nLes constructeurs\nLes métho des en Java\nClasses utiles : String, tableau et classes envelopp es\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 14 / 90",
        "Pro duction du binaire\nJava c'est quoi ?\nCompa ratif : Java, C++\nCompa ratif Concepts\nPro duction du binaire\nCompa ratif Java C Sha rp (C#)\nLe langage Java.\nLes classes Java.\nLes attributs Java\nLes constructeurs\nLes métho des en Java\nClasses utiles : String, tableau et classes envelopp es\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 15 / 90",
        "Java versus C++ : p ro duction du binaire\nUne fois achevée la p ro duction du logiciel, un choix doit être fait\nentre fournir le source ou le binaire p our la machine du client.\nGénéralement, une entrep rise souhaite p rotéger le co de source et\ndistribuer le co de binaire.\nLe co de binaire doit donc être p o rtable sur des a rchitectures\ndi\u001bérentes (p ro cesseur, système d'exploitation, etc.).\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 16 / 90",
        "Java versus C++ : compilateur C++\nÀ l'insta r du compilateur C , le compilateur C++ p ro duit du co de\nnatif, i.e. , qu'il p ro duit un exécutable p rop re à l'environnement de\ntravail ou le co de source est compilé.\nOn doit donc créer les exécutables p our chaque t yp e d'a rchitecture\np otentielle des clients.\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 17 / 90",
        "Java versus C++ : chaîne de p ro duction du C\nsource.c\ncompilation : gcc source.c -o monProg\nmonProg\nExecution : ./monProg\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 18 / 90",
        "Java versus C+ + : compilateur Java\nEn Java, le co de source n'est pas traduit directement dans le\nlangage de l'o rdinateur.\nIl est d'ab o rd traduit dans un langage app elé \"b yteco de\", langage\nd'une machine virtuelle (JVM \u0015 Java Virtual Machine) dé\u001cnie pa r\nOracle .\nP o rtabilité\nLe b yteco de généré pa r le compilateur ne dép end pas de l'a rchi-\ntecture de la machine où a été compilé le co de source, c'est-à-dire\nque les b yteco des p ro duits sur une machine p ourront s'exécuter\n(au travers d'une machine virtuelle) sur des a rchitectures di\u001bé-\nrentes.\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 19 / 90",
        "Exécution du b yteco de\nLe b yteco de doit être exécuté pa r une Machine Virtuelle Java.\nCette JVM n'existe pas. Elle est simulée pa r un p rogramme qui :\n1. lit les instructions (en b yteco de) du p rogramme .class\n2. fait une passe de véri\u001ccation (t yp e op érande, taille de pile, \u001dot\ndonnées, va riable bien initialisé,...) p our s'assurer qu'il n'y a\naucune action dangereuse.\n3. fait plusieurs passes d'optimisation du co de\n4. les traduit dans le langage natif du p ro cesseur de l'o rdinateur\n5. lance leur exécution\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 20 / 90",
        "Java versus C++ : chaîne de p ro duction du Java\nsource.java\nCompilation : javac source.java\nsource.class\nMachine virtuelle : java source.class\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 21 / 90",
        "Coût de la JVM sur les p erfo rmances.\nLes véri\u001ccations e\u001bectuées sur le b yteco de et la compilation du\nb yteco de vers le langage natif du p ro cesseur, ralentissent\nl'exécution des classes Java.\nMais les techniques de compilation à la volée \"Just In Time (JIT)\"\nou \"Hotsp ot\" réduisent ce p roblème : elles p ermettent de ne\ntraduire qu'une seule fois en co de natif les instructions qui sont\n(souvent p our Hotsp ot) exécutées.\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 22 / 90",
        "Java versus C++ : en résumé...\nLe langage Java est :\nI \u0013 C -lik e \u0014 : Syntaxe familière aux p rogrammeurs de C .\nI Orienté objet : T out est objet, sauf les t yp es p rimitifs (entiers,\n\u001dottants, b o oléens, ...) !\nI Robuste : T ypage fo rt, pas de p ointeurs, etc ...\nI Co de intermédiaire : Le compilateur ne p ro duit que du\nb yteco de indép endant de l'a rchitecture de la machine ou a été\ncompilé le co de source.\nNote\nJava p erd en e\u001ecacité pa r rapp o rt à C++ mais gagne en p o rta-\nbilité.\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 23 / 90",
        "Outline\nJava c'est quoi ?\nCompa ratif : Java, C++\nCompa ratif Concepts\nPro duction du binaire\nCompa ratif Java C Sha rp (C#)\nLe langage Java.\nLes classes Java.\nLes attributs Java\nLes constructeurs\nLes métho des en Java\nClasses utiles : String, tableau et classes envelopp es\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 24 / 90",
        "Compa ratif Java C Sha rp (C#)\nJava c'est quoi ?\nCompa ratif : Java, C++\nCompa ratif Concepts\nPro duction du binaire\nCompa ratif Java C Sha rp (C#)\nLe langage Java.\nLes classes Java.\nLes attributs Java\nLes constructeurs\nLes métho des en Java\nClasses utiles : String, tableau et classes envelopp es\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 25 / 90",
        "Java versus C#\nI Con\u001dit entre Sun et Microsoft en 1996 : certaines\nsp éci\u001ccations Java sont mal p rises en compte pa r\nl'environnement Windo ws.\nI Création en 1999 d'un Langage issu du C++ p our faire tourner\nle framew o rk .net .\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 26 / 90",
        "Java versus C#\nSimilitudes\nI Langage Objet fo rtement t yp é.\nI Syntaxe p ro che du C\nI Un ga rbage collecto r\nI d'ap rès Gosling C# est une imitation de Java.\nDi\u001bérences\nI C# pas p o rtable (ne tourne que sous windo ws et utilise\nCommon Language Runtime )\nI C# est no rmalisé\nI Surcha rge d'op érateur et a rithmétique des p ointeurs auto risé\nen C#\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 27 / 90",
        "Le langage Java.\nJava c'est quoi ?\nCompa ratif : Java, C++\nCompa ratif Concepts\nPro duction du binaire\nCompa ratif Java C Sha rp (C#)\nLe langage Java.\nLes classes Java.\nLes attributs Java\nLes constructeurs\nLes métho des en Java\nClasses utiles : String, tableau et classes envelopp es\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 28 / 90",
        "L'environnement actuel Java Standa rd Edition Java SE\nL'outil de base : le JDK (Java Development Kit) de Oracle :\nI http://www.java.com/fr/ .\nI gratuit.\nI Dernière version : 1.8.\nI comp rend de nomb reux outils :\nIle compilateur.\nIle compilateur à la volée \"JIT\".\nIle débogueur.\nIle générateur de documentation.\nDes environnements de développ ements (IDE) gratuits\nI NetBeans : http://www.netbeans.org/\nI Eclipse : http://www.eclipse.org/\nDeux environnements Java :\nJava SE (app elé avant J2SE) contient le JDK\nJava EE (app elé avant J2EE) contient environnement p our\nentrep rise.\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 29 / 90",
        "Java évolue tout le temps\nJava n'est pas un langage no rmalisé et il continu d'évoluer. Cette\névolution se fait en ajoutant de nouvelle API , mais aussi en\nmo di\u001cant la machine virtuelle .\nL'ensemble de ces mo di\u001ccations est géré pa r le JCP (Java\nCommunit y Pro cess ; http ://www.jcp.o rg/) dans lequel\nOracle continue de tenir une place p rép ondérante.\nIl p eut alo rs être nécessaire d'identi\u001cer une version p récise du\ncompilateur et/ou de la machine virtuelle : Ça n'est pas simple.\nLa numérotation des versions :\n1: 0\u0000! 1: 1\u0000! 1: 2\u0000! 1: 3\u0000! 1: 5| {z }\nT outes ces v ersions : Java 2\u0000! 1: 8(JavaSE 8)\nDo cumentation des API fournie :\nhttp://docs.oracle.com/javase/8/docs/api/\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 30 / 90",
        "Les versions de Java\nJDK 1.0 (1996 - 211 classes et interfaces)\nV ersion initiale.\nJDK 1.1 (1997 - 477 classes et interfaces)\nAjoute : classes internes, JavaBeans, JDBC, Java\nRemote Invocation (RMI).\nJ2SE 1.2 (1998 - 1 524 classes et interfaces) \u0015 Pla yground\nAjoute : réﬂection, SWING, compilateur JIT (Just in\nTime), Java IDL pour Corba.\nJ2SE 1.3 (2000 - 1 840 classes et interfaces) \u0015 Kestrel\nAjoute : HotSpot JVM, service de nomage (JNDI) et\nJavaSound.\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 31 / 90",
        "Les versions de Java (suite)\nJ2SE 1.4 (2002 - 2 723 classes et interfaces) – Merlin\nAjoute : mot-clé assert, expressions rationnelles, chaînage\nd–exception, parser XML et du moteur XSLT (JAXP),\nextensions de sécurité JCE (Java Cryptography Extension)\net Java Web Start.\nJ2SE 5.0 (2004 - 3 270 classes et interfaces) – Tiger\nAjoute : syntaxe à la foreach, enumerations ( enum),\nclasse Integer, autoboxing/unboxing\nJava SE 6 (2006-2013 - 3 777 classes et interfaces) – Mustang\nAjoute : covariance (redéﬁnition avec modiﬁcation du\ntype de retour), @overhiding.\nJava SE 7 2011 – Nom de code Dolphin\nAjoute : closures.\nPremière Version 100% open source.\nJava SE 8 2014 – Nom de code Kenai\nLTS avec Fin version en 2019 pour commercial ou 2025\nJava SE 11 2018 – Nom de code Kenai\nLTS avec Fin version en 2026 E. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 32 / 90",
        "Les classes Java.\nJava c'est quoi ?\nCompa ratif : Java, C++\nCompa ratif Concepts\nPro duction du binaire\nCompa ratif Java C Sha rp (C#)\nLe langage Java.\nLes classes Java.\nLes attributs Java\nLes constructeurs\nLes métho des en Java\nClasses utiles : String, tableau et classes envelopp es\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 33 / 90",
        "Classe : décla ration.\nP our décla rer une classe, on utilise le mot-clé class .\nExemple\npublic class Logement {\n// d e c l a r a t i o n des membres\n}\nRègle\nLa p remière lettre du nom d'une classe doit être une lettre ma-\njuscule.\nRema rque(s)\nDans le cadre de ce cours, nous ne pa rlerons que des classes dites\npubliques ( i.e. , décla rées public class ).\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 34 / 90",
        "Classe : dé\u001cnition.\nDé\u001cnir une classe en Java , c'est dé\u001cnir ses memb res à savoir :\n(1) ses attributs, (2) le(s) constructeur(s), (3) et ses métho des .\nI Il n'est pas nécessaire de sp éci\u001cer de mécanisme de\ndestruction,\nI transpa rente p our l'utilisateur,\nI p rise en cha rge pa r un gestionnaire app elé ga rbage collecto r\ncha rgé de détecter les instances à détruire.\nConséquences\nI gain de \u001cabilité (pas de désallo cation erronée).\nI a un coût (p erte en rapidité).\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 35 / 90",
        "Classe : visibilité d'un memb re\nP our chaque memb re, on doit p réciser sa visibilité, c'est-à-dire s'il\nest un memb re p rivé (décla ré private ), s'il est un public (décla ré\npublic ), etc.\npublic : memb re visible pa r l'ensemble des instances de\nl'ensemble des classes.\np rivate : memb re visible seulement pa r les instances de la\nclasse.\nRema rque(s)\nIl existe d'autres t yp es de visibilité p our un memb re que nous\nn'évo querons pas dans l'immédiat.\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 36 / 90",
        "Classe : memb res d'instance et de classes\nDé\u001cnition\nUn memb re de classe est un memb re commun à toutes les\ninstances de la classe. Il existe dès que la classe est dé\u001cnie. Ce, en\ndeho rs et indép endamment de toute instanciation.\nLes memb res de classe sont décla rés à l'aide du mot-clé static .\nUn memb re qui n'est pas de classe est dit d'instance . C'est un\nmemb re dont la valeur est p rop re à l'instance.\nImp o rtant\nChaque instance d'une classe p ossède son p rop re exemplaire\nd'un attribut d'instance.\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 37 / 90",
        "Classe : l'accès aux memb res de classe\nLes memb res de classes d'une classe donnée sont communs à toutes\nles instances de la classe.\nDonc l'accès à un memb re de classe doit se faire à travers le nom\nde la classe.\nAu mo y en de l'op érateur \u0013 . \u0014,\ni.e. , p our accéder à un memb re de classe, nommé x , d'une classe A ,\non écrit A.x .\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 38 / 90",
        "Classe : l'accès aux memb res d'instance\nP our accéder à un memb re d'instance, d'une instance donnée, on\nutilise une va riable contenant une référence vers l'instance (\u0013 son\nadresse \u0014).\nSi la va riable a contient une référence vers une instance d'une\nclasse A , on accède à un memb re d'instance à travers le nom de la\nréférence de l'instance au mo y en de l'op érateur \u0013 . \u0014,\ni.e. p our accéder à x : un memb re d'instance de l' instance a , on\nécrit a.x .\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 39 / 90",
        "Classe : l'accès aux memb res d'instance I I\nExemple\nA vec la classe Logement dé\u001cnie pa r\npublic Class Logement {\nf i n a l public double surface ;\npublic double prix ;\npublic String proprietaire ;\nprivate boolean vendu ;\npublic void changerPrix( double prix ){ plus tard}\npublic void vendre( String acquereur){ plus tard}\nL'app el se fait pa r\nasnieres92 . surface\nasnieres92 . changerPrix (210000.0d)\nparis14 . vendre(\"Djikstra\")\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 40 / 90",
        "Classe : accès au memb res exemple\nExemple\nQuelles sont les instructions qui renvo y ent une erreur ci-dessous ?\npublic class A{\ns t a t i c String nomClasse=\"La/uni2423classe/uni2423est/uni2423A\";\nString nomInstance ;\npublic A( String nomI){nomInstance=nomI;}\npublic s t a t i c void main( String [] args){\nA a= newA(\"son/uni2423nom/uni2423est/uni2423personne\");\nSystem. out . print (A. nomClasse + a. nomClasse );\nSystem. out . print (A. nomInstance + a. nomInstance );\n}\n}\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 41 / 90",
        "Classe : références Null et this\n- Il existe une référence pa rticulière : la référence null qui ne\nréfère aucune instance.\n- Une instance p eut accéder à sa p rop re référence grâce à la\nva riable this (va riable en lecture seule).\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 42 / 90",
        "Classe java t yp e\nDonnons le fo rmat général d'une classe\n// Type + nom ( de c l a s s e )\npublic class Point {\n// (1) A t t r i b u t s\nprivate double x ,y;// (2) C o n s t r u c t e u r s\npublic Point( double x ,double y) {...}\n// (3) Methodes de c l a s s e\ns t a t i c distanceEntre (Point p1 ,p2) {...}\n// (4) A c c e s s e u r s\npublic double getX() {...}\n// (5) Methodes P u b l i q u e s\npublic double distanceAvec(Point p2) {...}\n// (6) Methodes p r i v e e s\nprivate void deplace( double nx , double ny) {...}\n// (7) Methodes s t a n d a r d s\npublic String toString () {...} }\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 43 / 90",
        "Classe java t yp e\nDonnons le fo rmat général d'une classe\n// Type + nom ( de c l a s s e )\npublic class Point {\n// (1) A t t r i b u t s\nprivate double x ,y;\n// (2) C o n s t r u c t e u r s\npublic Point( double x ,double y) {...}// (3) Methodes de c l a s s e\ns t a t i c distanceEntre (Point p1 ,p2) {...}\n// (4) A c c e s s e u r s\npublic double getX() {...}\n// (5) Methodes P u b l i q u e s\npublic double distanceAvec(Point p2) {...}\n// (6) Methodes p r i v e e s\nprivate void deplace( double nx , double ny) {...}\n// (7) Methodes s t a n d a r d s\npublic String toString () {...} }\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 43 / 90",
        "Classe java t yp e\nDonnons le fo rmat général d'une classe\n// Type + nom ( de c l a s s e )\npublic class Point {\n// (1) A t t r i b u t s\nprivate double x ,y;\n// (2) C o n s t r u c t e u r s\npublic Point( double x ,double y) {...}\n// (3) Methodes de c l a s s e\ns t a t i c distanceEntre (Point p1 ,p2) {...}// (4) A c c e s s e u r s\npublic double getX() {...}\n// (5) Methodes P u b l i q u e s\npublic double distanceAvec(Point p2) {...}\n// (6) Methodes p r i v e e s\nprivate void deplace( double nx , double ny) {...}\n// (7) Methodes s t a n d a r d s\npublic String toString () {...} }\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 43 / 90",
        "Classe java t yp e\nDonnons le fo rmat général d'une classe\n// Type + nom ( de c l a s s e )\npublic class Point {\n// (1) A t t r i b u t s\nprivate double x ,y;\n// (2) C o n s t r u c t e u r s\npublic Point( double x ,double y) {...}\n// (3) Methodes de c l a s s e\ns t a t i c distanceEntre (Point p1 ,p2) {...}\n// (4) A c c e s s e u r s\npublic double getX() {...}// (5) Methodes P u b l i q u e s\npublic double distanceAvec(Point p2) {...}\n// (6) Methodes p r i v e e s\nprivate void deplace( double nx , double ny) {...}\n// (7) Methodes s t a n d a r d s\npublic String toString () {...} }\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 43 / 90",
        "Classe java t yp e\nDonnons le fo rmat général d'une classe\n// Type + nom ( de c l a s s e )\npublic class Point {\n// (1) A t t r i b u t s\nprivate double x ,y;\n// (2) C o n s t r u c t e u r s\npublic Point( double x ,double y) {...}\n// (3) Methodes de c l a s s e\ns t a t i c distanceEntre (Point p1 ,p2) {...}\n// (4) A c c e s s e u r s\npublic double getX() {...}\n// (5) Methodes P u b l i q u e s\npublic double distanceAvec(Point p2) {...}// (6) Methodes p r i v e e s\nprivate void deplace( double nx , double ny) {...}\n// (7) Methodes s t a n d a r d s\npublic String toString () {...} }\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 43 / 90",
        "Classe java t yp e\nDonnons le fo rmat général d'une classe\n// Type + nom ( de c l a s s e )\npublic class Point {\n// (1) A t t r i b u t s\nprivate double x ,y;\n// (2) C o n s t r u c t e u r s\npublic Point( double x ,double y) {...}\n// (3) Methodes de c l a s s e\ns t a t i c distanceEntre (Point p1 ,p2) {...}\n// (4) A c c e s s e u r s\npublic double getX() {...}\n// (5) Methodes P u b l i q u e s\npublic double distanceAvec(Point p2) {...}\n// (6) Methodes p r i v e e s\nprivate void deplace( double nx , double ny) {...}// (7) Methodes s t a n d a r d s\npublic String toString () {...} }\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 43 / 90",
        "Classe java t yp e\nDonnons le fo rmat général d'une classe\n// Type + nom ( de c l a s s e )\npublic class Point {\n// (1) A t t r i b u t s\nprivate double x ,y;\n// (2) C o n s t r u c t e u r s\npublic Point( double x ,double y) {...}\n// (3) Methodes de c l a s s e\ns t a t i c distanceEntre (Point p1 ,p2) {...}\n// (4) A c c e s s e u r s\npublic double getX() {...}\n// (5) Methodes P u b l i q u e s\npublic double distanceAvec(Point p2) {...}\n// (6) Methodes p r i v e e s\nprivate void deplace( double nx , double ny) {...}\n// (7) Methodes s t a n d a r d s\npublic String toString () {...} }\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 43 / 90",
        "Outline\nJava c'est quoi ?\nCompa ratif : Java, C++\nCompa ratif Concepts\nPro duction du binaire\nCompa ratif Java C Sha rp (C#)\nLe langage Java.\nLes classes Java.\nLes attributs Java\nLes constructeurs\nLes métho des en Java\nClasses utiles : String, tableau et classes envelopp es\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 44 / 90",
        "Les attributs Java\nJava c'est quoi ?\nCompa ratif : Java, C++\nCompa ratif Concepts\nPro duction du binaire\nCompa ratif Java C Sha rp (C#)\nLe langage Java.\nLes classes Java.\nLes attributs Java\nLes constructeurs\nLes métho des en Java\nClasses utiles : String, tableau et classes envelopp es\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 45 / 90",
        "Décla ration d'un attribut\nEn Java, toutes les va riables doivent être décla rées avant d'être\nutilisées (les attributs comme les va riable lo cales des métho des).\nLa décla ration des attributs se fait de p référence en debut de classe.\nOn indique au compilateur :\n1. Un ensemble de mo di\u001ccateurs ( facultatif ) : visibilité,\nconstante, : : : .\n2. Le t yp e de la va riable.\n3. Le nom de la va riable.\nExemple\nprivate double z;\npublic String str ;\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 46 / 90",
        "Les t yp es en Java\nLe t yp e d'une va riable en Java p eut être :\nI T yp es dits p rimitifs : int ,double ,boolean , etc.\nI nom d'une classe : pa r exemple, les chaînes de ca ractères\nsont des instances de la classe String .\nRema rque(s)\nNous laissons de côté p our l'instant le cas des tableaux sur lesquels\nnous reviendrons plus ta rd.\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 47 / 90",
        "Les t yp es p rimitifs\nT yp e T aille (en bits) Exemple\nbyte 8 1\nshort 16 345\nint 32 -2\nlong 64 2L\nﬂoat 32 3.14f, 2.5e+5\ndouble 64 0.2d, 1.567e-5\nboolean 1 true ou false\nchar 16 'a'\nA ttention\nUn attribut de t yp e p rimitif n'est pas un objet !\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 48 / 90",
        "A\u001becter une valeur à un attribut\nL'a\u001bectation d'une valeur à une va riable est e\u001bectuée pa r\nl'instruction\nvariable = expression ;\nL'exp ression est calculée et ensuite la valeur calculée est a\u001bectée à\nla va riable\nExemple\nx = 36.0d;\ny = x + 1;\nstr = \"Linus\";\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 49 / 90",
        "Initialisation d'un attribut\nEn Java, une va riable doit être initialisée (recevoir une valeur)\navant d'être utilisée dans une exp ression.\nS'ils ne sont pas initialisés exp ressement pa r le p rogrammeur, les\nattributs sont automatiquement initialisés pa r le compilateur. Ils\nreçoivent alo rs une valeur pa r défaut de leur t yp e : 0 p our les int ,\n0: 0d p our les double ,false p our les boolean ,null p our les\nString , etc.\nRema rque(s)\nOn p eut initialiser un attribut lo rs de sa décla ration.\nExemple\nprivate i n t x =\u00001;\npublic String str = \"Licence/uni2423MIAGE\";\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 50 / 90",
        "Le mo di\u001ccateur ﬁnal\nOn p eut blo quer la mo di\u001ccation de la valeur d'un attribut (en\ndeho rs de l'instanciation) à l'aide du mot-clé ﬁnal .\nf i n a l private i n t x;\nRema rque(s)\nOn utilise souvent un attribut de classe décla ré ﬁnal p our dé\u001cnir\nune constante :\nf i n a l s t a t i c public double PI = 3.14d;\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 51 / 90",
        "Les t yp es en Java : décla rer les attributs\nExemple\npublic class Logement {\n// l e s a t t r i b u t s\nf i n a l public double surface ;\npublic double prix ;\npublic String proprietaire ;\nprivate boolean vendu ;\n}\nRema rque(s)\nT raditionnellement, le nom d'un attribut ou d'une métho de\ncommence pa r une lettre minuscule.\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 52 / 90",
        "Outline\nJava c'est quoi ?\nCompa ratif : Java, C++\nCompa ratif Concepts\nPro duction du binaire\nCompa ratif Java C Sha rp (C#)\nLe langage Java.\nLes classes Java.\nLes attributs Java\nLes constructeurs\nLes métho des en Java\nClasses utiles : String, tableau et classes envelopp es\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 53 / 90",
        "Les constructeurs\nJava c'est quoi ?\nCompa ratif : Java, C++\nCompa ratif Concepts\nPro duction du binaire\nCompa ratif Java C Sha rp (C#)\nLe langage Java.\nLes classes Java.\nLes attributs Java\nLes constructeurs\nLes métho des en Java\nClasses utiles : String, tableau et classes envelopp es\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 54 / 90",
        "Constructeur en Java : dé\u001cnition\nLes instances d'une classe sont créées (construits) pa r une métho de\npa rticulière de la classe app elée constructeur .\nI Le constructeur est une métho de p o rtant le même nom que la\nclasse.\nI T oute classe comp o rte au moins un constructeur. Il p eut y\navoir plusieurs constructeurs !\nI Le constructeur p ermet d'initialiser les attributs de l'instance\ncréée.\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 55 / 90",
        "Constructeur en Java : dé\u001cnition\nRema rque(s)\nSi jamais une classe ne comp o rte pas de dé\u001cnition d'un\nconstructeur, JA V A lo rs de la compilation rajoute le constructeur\nsans pa ramètres (constructeur pa r défaut).\nSi jamais une classe comp o rte un constructeur avec pa ramètres, le\nconstructeur sans pa ramètres n'est pas ajouté.\nNB cela p eut p oser p roblème si jamais une classe héritée fait app el\nau constructeur pa r défaut.\nSi jamais un constructeur est dé\u001cni sans débuter pa r un app el de\nconstructeur, alo rs Java insère un app el du constructeur sans\npa ramètres de la sup er classe super() .\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 56 / 90",
        "Constructeur en Java : exemple de constructeur\nExemple\npublic class Logement {\n// c o n s t r u c t e u r\npublic Logement( double surface ,\ndouble prix )\n{\nthis. surface = surface ;\nthis. vendu = false;\nthis. prix = prix ;\n}\n}\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 57 / 90",
        "Constructeur en Java : dé\u001cnition imb riquée\nOn p eut utiliser un constructeur p our dé\u001cnir un autre constructeur.\nL'utilisation d'un autre constructeur se fait au mo y en du mot-clé\nthis .\nL'invo cation d'un autre constructeur doit être la p remière\ninstruction.\nExemple\npublic class Logement {\n// un deuxieme c o n s t r u c t e u r\npublic Logement( double surface , double prix ,\nString proprietaire )\n{\nthis(surface , prix );\nthis. proprietaire = proprietaire ;\n}\n}\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 58 / 90",
        "Constructeur en Java : invo cation\nP our créer une instance d'une classe A , on utilise l'op érateur new\navec un des constructeurs de la classe.\nCela alloue l'espace mémoire nécessaire p our sto ck er les p rop riétés\nde l'objet, crée une référence sur cet espace mémoire et retourne la\nréférence ainsi créée.\nÀ retenir\nT out est dynamique : les instances d'une classe sont instanciées\ndynamiquement.\nExemple\nLogement asnieres92 ;\nasnieres92 = newLogement(80.0d,250000.0d,\"Linus\");\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 59 / 90",
        "Outline\nJava c'est quoi ?\nCompa ratif : Java, C++\nCompa ratif Concepts\nPro duction du binaire\nCompa ratif Java C Sha rp (C#)\nLe langage Java.\nLes classes Java.\nLes attributs Java\nLes constructeurs\nLes métho des en Java\nClasses utiles : String, tableau et classes envelopp es\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 60 / 90",
        "Les métho des en Java\nJava c'est quoi ?\nCompa ratif : Java, C++\nCompa ratif Concepts\nPro duction du binaire\nCompa ratif Java C Sha rp (C#)\nLe langage Java.\nLes classes Java.\nLes attributs Java\nLes constructeurs\nLes métho des en Java\nClasses utiles : String, tableau et classes envelopp es\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 61 / 90",
        "Les métho des en Java : syntaxe et dé\u001cnition\nLa syntaxe p our dé\u001cnir le co rps d'une métho de est identique à celle\nutilisée en C p our dé\u001cnir une fonction. Notamment, les noms et la\nsyntaxe\nI des instructions (conditionnelles, itératives, etc.) et,\nI des op érateurs (a rithmétiques, de compa raison, logiques, etc.)\nsont les mêmes qu'en C .\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 62 / 90",
        "Les métho des en Java : exemple de dé\u001cnition\nExemple\npublic class Logement {\npublic void changerPrix( double prix )\n{\ni f( prix >= 0) { this. prix = prix ;}\n}\npublic void vendre( String acquereur)\n{\nthis. proprietaire = acquereur ;\nthis. vendu = true;\n}\n}\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 63 / 90",
        "Les métho des en Java : exemple de dé\u001cnition (suite)\nExemple (suite)\npublic class Logement {\npublic String annonce()\n{\nString str = \"Logement/uni2423(\" + this. surface + \")\";\nstr = str + \"/uni2423:/uni2423\" + this. prix + \"/uni2423euros\";\ni f(this. vendu) {str = str + \"/uni2423 \u0000/uni2423vendu\";}\nreturn str ;\n}\n}\nRema rque(s)\nL'op érateur + p ermet de concaténer deux chaînes de ca ractères\n(instances de la classe String ).\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 64 / 90",
        "Les métho des en java : les accesseurs\nConseil\nOn ne doit p ouvoir mo di\u001cer l' état interne d'une instance ( i.e. ,\nles valeurs de ses attributs) qu'à travers des métho des d'instance\nde la classe : les accesseurs ou les mutateurs\nExemple\nLa dé\u001cnition de la classe Logement p ermet à n'imp o rte quel\nutilisateur de mo di\u001cer les valeurs des attributs prix et\nproprietaire sans utiliser les métho des changerPrix et vendre .\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 65 / 90",
        "Les métho des en java : les accesseurs (suite)\nExemple (suite)\nUne meilleure conception de la classe Logement est de décla rer ces\nattributs comme suit\nprivate double prix ;\nprivate String proprietaire ;\net de lui ajouter les métho des\npublic double prix ()\n{\nreturn this . prix ;\n}\npublic String proprietaire ()\n{\nreturn this . proprietaire ;\n}\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 66 / 90",
        "Les métho des static en java ( i.e. métho des de classe)\nI Comme les attributs de classe, une métho de de classe existe\ndès que la classe est dé\u001cnie. Ce, en deho rs et indép endamment\nde toute instanciation.\nI Une métho de static ne p eut utiliser directement aucun\nattribut ni aucune métho de d'instance de la classe ; une erreur\nsurviendrait à la compilation.\nI Une métho de qui manipule, en lecture ou en écriture des\nattributs d'instance de la classe doit être une métho de\nd'instance.\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 67 / 90",
        "Les métho des static en java (suite)\nRema rque(s)\nUne classe qui ne comp o rterait que des memb res static ne sert pas\nà créer des objets ! ! !\nExemple\nLa classe System est une classe ne p ossédant que des attributs et\ndes métho des de classes.\nI Elle p ermet d'a rrêter b rutalement un p rogramme avec\nmétho de de classe exit :\nSystem.exit(0);\nI Elle p ermet d'a\u001echer des messages dans la console\nSystem. out . println (\"Hello ,/uni2423World/uni2423!\");\nSystem. out . println (5);\net out est un attribut de classe de System qui est de t yp e\nPrintStream .\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 68 / 90",
        "La métho de main de Java : concept\nIl ne su\u001et pas de dé\u001cnir les attributs, constructeurs et métho des\ndes di\u001bérentes classes.\nIl faut p ouvoir exécuter un p rogramme, les concepteurs de Java ont\nchoisi p our cela de pa rticula riser une métho de : la métho de main .\nLa métho de main est une métho de de classe publique, qui contient\nle \u0013 p rogramme p rincipal \u0014 à exécuter et qui a p our signature :\npublic s t a t i c void main( String [] args)\nA TTENTION\nLa métho de main ne p eut pas retourner d'entier comme en C.\npublic s t a t i c intmain( String [] args)\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 69 / 90",
        "La métho de main de java : exemple\nExemple\npublic class Logement {\n// l e programme p r i n c i p a l\npublic s t a t i c void main( String [] args)\n{\nLogement asnieres92 ;\nasnieres92 = newLogement(80.0d,2.5e+5,\"Linus\");\nSystem. out . println ( asnieres92 . annonce ());\nasnieres92 . changerPrix (300000.0d);\nSystem. out . println ( asnieres92 . surface );\nSystem. out . println ( asnieres92 . prix ());\nasnieres92 . vendre(\"Djikstra\");\nSystem. out . println ( asnieres92 . proprietaire ());\n}\n}\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 70 / 90",
        "Le p olymo rphisme en Java : dé\u001cnition\nOn p eut\n1. décla rer plusieurs fois la même métho de avec la même\nsignature et des implémentations di\u001bérentes dans plusieurs\nclasses : redé\u001cnition .\n2. décla rer plusieurs fois la même métho de avec des signatures\ndi\u001bérentes et des implémentations di\u001bérentes dans la même\nclasse : surcha rge .\nPrécision\nLa signature d'une métho de est constituée du nom de la métho de,\ndu nomb re et du t yp e de ses pa ramètres, et du t yp e qu'elle ren-\nvoie.\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 71 / 90",
        "Le p olymo rphisme en Java : exemple\nExemple\nSoit 2 classes qui héritent de Appa reilElectrique\npublic class FourElectrique {\npublic void demarrer ()\n{\nSystem. out . println (\"Montee/uni2423en/uni2423temperature\");\n}\n}\npublic class Ordinateur {\npublic void demarrer ()\n{\nSystem. out . println (\"Demarrage/uni2423de/uni2423Linux\");\n}\n}\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 72 / 90",
        "Le p olymo rphisme en Java : exemple (suite)\npublic class Rectangle {\npublic f l o a t largeur ;\npublic f l o a t longueur ;\nRectangle( f l o a tlargeur , f l o a tlongueur) {\nthis. largeur=largeur ;\nthis. longueur=longueur ;\n}\npublic void redimensionner ( i n tfacteur ) {\nlargeur = largeur \u0003facteur ;\nlongueur = longueur \u0003facteur ;\n}\npublic void redimensionner ( f l o a ta,f l o a tb) {\nlargeur = largeur + a;\nlongueur = longueur +b;\n}}\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 73 / 90",
        "Le p olymo rphisme en Java : imp o rtant\nImp o rtant\nOn p eut dé\u001cnir autant de signatures que l'on veut de la même\nmétho de (faire va rier le nomb re d'a rguments, changer le t yp e\ndes a rguments, changer le t yp e de retour). Il y a néanmoins une\nrestriction : si l'on dé\u001cnit plusieurs fois la même métho de dans une\nclasse, la di\u001bérence entre deux signatures ne doit pas seulement\nêtre le t yp e de retour, i.e. , pa r exemple, on ne p eut pas écrire\ndans la même classe :\npublic i n t f (i n ta) { ... }\npublic f l o a t f (i n ta) { ... }\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 74 / 90",
        "Compilation et exécution (1)\nEtap e 1 : on crée un \u001cchier texte dont le nom est le nom de la\nclasse auquel on rajoute l'extension .java .\nExemple\nOn écrit la dé\u001cnition de la classe Logement dans un \u001cchier texte\nnommé Logement.java .\nImp o rtant\nUn \u001cchier ne p eut contenir qu'une seule classe publique.\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 75 / 90",
        "Compilation et exécution (2)\nEtap e 2 : on compile le p rogramme Java à l'aide de la commande\njavac .\nHelloW o rld.java\npublic class HelloWorld f\npublic static void main (String args[]) f\nSystem.out.println(\"Hello World!\");\ngg\njavac HelloW o rld.java\nHelloW o rld.class\n0 getstatic #7 < Field java.io.PrintStream out >\n3 ldc #1 < String \"Hello World!\" >\n5 invokevirtual #8 < Method void println(java.lang.String) >\n8 return\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 76 / 90",
        "Compilation et exécution (3)\nEtap e 3 : le JIT de la machine virtuelle compile à la volée le\nb yteco de p ro duit (c'est-à-dire on éxecute la métho de main ) à l'aide\nla commande java .\njava HelloW o rldHelloW o rld.class\n0 getstatic #7 < Field java.io.PrintStream out >\n3 ldc #1 < String \"Hello World!\" >\n5 invokevirtual #8 < Method void println(java.lang.String) >\n8 return\nInterpréteur javaMachine virtuelle Java : JVM/Système\nd'exploitationInterprétation\nExécution\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 77 / 90",
        "Compilation et interp rétation (4)\nImp o rtant Bien positionner les variables d’environnement\nPATH : doit contenir le rép ertoire du compilateur et de\nla machine virtuelle.\nCLASSPATH : indique le chemin ou se trouve les classes (pa r\ndéfaut, le rép ertoire courant) sinon vous aurez le\nmessage d'erreur\nException in thread \"main\"\njava.lang.NoClassDefFoundError: HelloWorld\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 78 / 90",
        "Outline\nJava c'est quoi ?\nCompa ratif : Java, C++\nCompa ratif Concepts\nPro duction du binaire\nCompa ratif Java C Sha rp (C#)\nLe langage Java.\nLes classes Java.\nLes attributs Java\nLes constructeurs\nLes métho des en Java\nClasses utiles : String, tableau et classes envelopp es\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 79 / 90",
        "Classes utiles : String, tableau et classes envelopp es\nJava c'est quoi ?\nCompa ratif : Java, C++\nCompa ratif Concepts\nPro duction du binaire\nCompa ratif Java C Sha rp (C#)\nLe langage Java.\nLes classes Java.\nLes attributs Java\nLes constructeurs\nLes métho des en Java\nClasses utiles : String, tableau et classes envelopp es\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 80 / 90",
        "Les chaînes de ca ractères : le t yp e String (1)\nLes chaînes de ca ractères sont des instances de la classe String .\nL'op érateur de concaténation des chaînes de ca ractères est\nl'op érateur + .\nA ttention\nP our compa rer deux chaînes de ca ractères, on utilise la métho de\nequals (ou equalsIgnoreCase ) de la classe String .\nString str1 = . . . . ;\nString str2 = . . . . ;\ni f( str1 . equals ( str2 )) {...} else{...}\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 81 / 90",
        "Les chaînes de ca ractères : le t yp e String (2)\nLa classe String o\u001bre de nomb reuses autres p ossibilités :\nI length() renvoie la longueur de la chaîne de ca ractères.\nI toUpperCase et toLowerCase p ermettent, resp ectivement, de\nmettre la chaîne de ca ractères en lettres majuscules et\nminuscules.\nI int indexOf (char ch) renvoie l'indice de la p remière\no ccurence du ca ractère ch dans la chaîne de ca ractères.\nI String substring(int beginIndex,int endIndex) qui\nretourne la sous-chaîne constitué des ca ractères d'indice\nbeginIndex à endIndex - 1 .\nI etc ...\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 82 / 90",
        "Les tableaux\nImp o rtant\nUn tableau est un objet !\nDeux étap es :\n1. Décla ration : déterminer le t yp e de ses éléments.\n2. Dimensionnement : déterminer la taille du tableau (c'est-à-dire\nle nomb re d'éléments).\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 83 / 90",
        "Les tableaux unidimensionnels\nLa décla ration d'un tableau p récise simplement le t yp e des éléments\ndu tableau :\ni n t[] tableau ;\nLa dimension du tableau est p récisé lo rs de son instanciation\n// c r e e un t a b l e a u pouvant c o n t e n i r 50 e n t i e r s\ntableau = new i n t [50];\nI La taille d'un tableau ne p eut plus être mo di\u001cée pa r la suite.\nI Dimension du tableau : tableau.length\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 84 / 90",
        "Les tableaux unidimensionnels\nI On accède à l'élément d'indice i du tableau en écrivant\ntableau[i] .\nI Les indices commencent à 0.\nI Java véri\u001ce automatiquement l'indice lo rs de l'accès.\nRema rque(s)\nOn p eut aussi donner explicitement la liste des éléments :d'un\ntableau au moment de son instanciation :\ni n t[] tableau = {1 ,2 ,3};\nString [] mots = {\"Licence\" ,\"MIAGE\" ,\"POO\"};\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 85 / 90",
        "Les tableaux unidimensionnels\nRema rque(s)\nSi l'on décla re un tableau dont les éléments sont des références de\nt yp e logement :\nLogement [] ville ;\nAlo rs, la ligne de commande\nville = newLogement [100];\ninstancie un tableau de 100 références initialisées à null . Si l'on\nveut qu'une case contienne une référence vers une instance de la\nclasse Logement , on doit instancier une instance de la classe\nLogement et écrire la référence de l'instance dans la case :\nville [50] = newLogement(67.0d,5e+5);\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 86 / 90",
        "Les tableaux unidimensionnels\nL'a rgument args de la métho de main est un tableau dont les\néléments sont des références vers des chaînes de ca ractères. Il\np ermet de passer à la métho de main des pa ramètres en ligne de\ncommande\nExemple\nSi l'on écrit\njava Programme a 3 5.7 true\nalo rs args est un tableau de dimension 4 contenant les références\nvers les chaînes de ca ractères \"a\", \"3\", \"5.7\" et \"true\". Les\nréférences sont mises dans le même o rdre que sur la ligne de\ncommande. P a r exemple, args[1] est une référence vers la chaîne\nde ca ractères \"3\".\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 87 / 90",
        "Les classes envelopp es des t yp es p rimitifs\nA chaque t yp e p rimitif est asso cié une classe qu'on app elle classe\nenvelopp e de ce t yp e p rimitif.\nExemple\nLa classe envelopp e du t yp e int est la classe Integer .\nInteger entier = newInteger (56);\nChaque classe envelopp e d'un t yp e p rimitif p ossède une métho de\np our convertir une instance de la classe en une valeur du t yp e\np rimitif asso cié.\nExemple\ni n ti = entier . intValue ();\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 88 / 90",
        "Les classes envelopp es des t yp es p rimitifs\nP our les autres t yp es p rimitifs, les noms des classes envelopp es\nsont :\nT yp e p rimitif classe envelopp e\nshort Sho rt\nlong Long\nbyte Byte\nﬂoat Float\ndouble Double\nboolean Bo olean\nchar Cha racter\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 89 / 90",
        "Les classes envelopp es des t yp es p rimitifs\nElles p ermettent notamment de convertir une chaîne de ca ractères\nen un entier, un \u001dottant, un b o oléen, etc ...\nExemple\nInteger . parseInt (\"6\");\nDouble . parseDouble(\"6.89\");\nBoolean . parseBoolean(\"false\");\nE. Hy on (UPN) Intro duction à Java. L3 Miage - 2020/2021 90 / 90"
    ]
}